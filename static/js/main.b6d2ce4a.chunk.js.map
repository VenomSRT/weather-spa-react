{"version":3,"sources":["components/CityCards/CityCard/CityCard.js","components/CityCards/CityCards.js","components/CityPage/CityPage.js","api/api.js","App.js","index.js"],"names":["CityCard","cityData","deleteCity","setCurrentCity","renewData","className","onClick","id","to","name","console","log","coord","weather","map","conditions","src","icon","alt","description","main","temp","toFixed","feels_like","humidity","pressure","wind","speed","style","transform","deg","Date","dt","toString","split","CityCards","cities","length","city","CityPage","currentCityForecast","hourly","filter","data","index","bottom","backgroundColor","Math","round","getHours","appId","units","lang","getGroupWeatherData","citiesId","fetch","then","response","json","App","useState","currentCity","setCurrentCityForescast","setCities","writeToStorage","localStorage","setItem","JSON","stringify","useEffect","storageCities","parse","getItem","join","list","lon","lat","catch","err","type","cityId","inputField","document","querySelector","inputValue","value","trim","every","cod","alert","clear","exact","path","forEach","newCities","splice","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b6d2ce4a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './CityCard.scss';\n\nexport const CityCard = ({ cityData, deleteCity, setCurrentCity, renewData }) => (\n  <div className=\"card\">\n    <div\n      className=\"card__delete\"\n      onClick={() => deleteCity(cityData.id)}\n    />\n    <Link\n      to={`/${cityData.name}`}\n      onClick={() => {\n        console.log(cityData.name, cityData.coord);\n        setCurrentCity({\n          name: cityData.name,\n          coord: cityData.coord\n        });\n      }}\n    >\n      <h3 className=\"card__title\">\n        {cityData.name}\n      </h3>\n    </Link>\n    <p className=\"card__image-container\">\n      {cityData.weather.map(conditions => (\n        <figure>\n          <img\n            src={`http://openweathermap.org/img/wn/${conditions.icon}@2x.png`}\n            alt={conditions.description}\n          />\n          <figcaption>{conditions.main}</figcaption>\n        </figure>\n      ))}\n    </p>\n    <p className=\"card__data-row\">\n      <span>Temperature:</span> {cityData.main.temp.toFixed(1)} &#8451;\n    </p>\n    <p className=\"card__data-row\">\n      <span>Temperature (feels like):</span> {cityData.main.feels_like.toFixed(1)} &#8451;\n    </p>\n    <p className=\"card__data-row\">\n      <span>Humidity:</span> {cityData.main.humidity}%\n    </p>\n    <p className=\"card__data-row\">\n      <span>Pressure:</span> {cityData.main.pressure} hPa\n    </p>\n    <p className=\"card__data-row\">\n      <span>Wind:</span>\n\n      <div className=\"card__wind-data\">\n        <div>{cityData.wind.speed} m/s</div>\n        \n        <div\n          className=\"card__arrow\"\n          style={{\n            transform: `rotate(${cityData.wind.deg}deg)`\n          }}\n        ></div>\n      </div>\n    </p>\n    <p className=\"card__data-row\">\n      Date of last data update: {new Date(cityData.dt * 1000).toString().split('GMT')[0]}\n    </p>\n    <button\n      className=\"card__button\"\n      onClick={() => renewData(cityData.id)}\n    >\n      Refresh\n    </button>\n  </div>\n);","import React from 'react';\nimport { CityCard } from './CityCard/CityCard';\nimport './CityCards.scss';\n\nexport const CityCards = ({ cities, setCurrentCity, deleteCity, renewData }) => (\n  <div className=\"cards\">\n    {cities.length > 0 && cities.map(city => {\n      console.log(cities);\n      return (<div key={city.id}>\n        <CityCard\n          cityData={city}\n          deleteCity={deleteCity}\n          setCurrentCity={setCurrentCity}\n          renewData={renewData}\n        />\n      </div>)\n    })}\n  </div>\n);","import React from 'react';\nimport './CityPage.scss';\n\nexport const CityPage = ({ currentCityForecast }) => {\n  console.log(currentCityForecast);\n\n  return(\n    currentCityForecast && (\n      <div className=\"city\">\n        <h2 className=\"city__title\">{currentCityForecast.name}</h2>\n        <div className=\"city__weather-container\">\n          {currentCityForecast.hourly\n            .filter((data, index) => index < 25 && index > 0 && !(index % 2))\n            .map(data => (\n              <div\n                key={`${data.dt}`}\n                className=\"city__hour-block\"\n              > \n                <div className=\"city__temp-outer-container\">\n                  <div className=\"city__temp-inner-container\">\n                    <div\n                      className=\"city__temp\"\n                      style={{\n                        bottom: `${0 + +data.temp.toFixed(0)}%`,\n                        backgroundColor: `hsl(${180 + +data.temp.toFixed(0) * -3}, 100%, 80%)`\n                      }}\n                    >\n                      {Math.round(data.temp)}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"city__hour-title\">\n                  {new Date(data.dt * 1000).getHours()}:00\n                </div>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    )\n  )\n}\n\n","const BASE_URL = 'http://api.openweathermap.org/data/2.5/weather';\nconst BASE_GROUP_URL = 'http://api.openweathermap.org/data/2.5/group';\nconst HOURLY_URL = 'https://api.openweathermap.org/data/2.5/onecall';\nconst appId = 'd34e25f9138fc266e1b0343493f27b54';\nconst units = 'metric';\nconst lang = 'en';\n\nexport const getWeatherData = (cityId) => {\n  return fetch(`${BASE_URL}?q=${cityId}&units=${units}&lang=${lang}&appid=${appId}`)\n    .then(response => response.json());\n}\n\nexport const getGroupWeatherData = (citiesId) => {\n  return fetch(`${BASE_GROUP_URL}?id=${citiesId}&units=${units}&lang=${lang}&appid=${appId}`)\n    .then(response => response.json());\n}\n\nexport const getHourlyData = (lon, lat) => {\n  return fetch(`${HOURLY_URL}?lat=${lat}&lon=${lon}&exclude=current,minutely,daily&units=${units}&lang=${lang}&appid=${appId}`)\n   .then(response => response.json());\n}","import React, { useState, useEffect } from 'react';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport { CityCards } from \"./components/CityCards/CityCards\";\nimport { CityPage } from \"./components/CityPage/CityPage\";\nimport { getWeatherData, getGroupWeatherData, getHourlyData } from \"./api/api\";\nimport './App.scss';\n\nfunction App() {\n  const [currentCity, setCurrentCity] = useState('');\n  const [currentCityForecast, setCurrentCityForescast] = useState(null)\n  const [cities, setCities] = useState([]);\n\n  useEffect(() => {\n    const storageCities = JSON.parse(localStorage.getItem('cities'));\n\n    if (storageCities && storageCities.length) {\n      getGroupWeatherData(storageCities.map(city => city.id).join(','))\n        .then(data => {\n          setCities(data.list);\n          writeToStorage(data.list);\n        }) \n    }\n  }, [])\n\n  useEffect(() => {\n    console.log(currentCity);\n    if(currentCity) {\n      getHourlyData(currentCity.coord.lon, currentCity.coord.lat)\n        .then(data => {\n          data.name = currentCity.name;\n          setCurrentCityForescast(data);\n        })\n        .catch(err => {console.log(err)});\n    }\n  }, [currentCity])\n\n  function writeToStorage(cities) {\n    localStorage.setItem(\n      'cities',\n      JSON.stringify(cities)\n    )\n  }\n\n  function inputHandler() {\n    let inputField = document.querySelector('#search');\n    const inputValue = inputField.value.trim();\n\n    if (cities.every(city => city.name !== inputValue)) {\n      getWeatherData(inputValue)\n        .then(data => {\n          if (data.cod === 200 && (!cities.length || cities.every(city => city.id !== data.id))) {\n            setCities([...cities, data]);\n            writeToStorage([...cities, data]);\n          } else {\n            console.log(cities);\n            alert('Wrong input');\n          }\n        })\n\n      inputField.value = '';\n    }\n  }\n\n  function deleteCity(cityId) {\n    setCities(cities.filter(city => city.id !== cityId));\n    writeToStorage(cities.filter(city => city.id !== cityId));\n  }\n\n  function renewData(cityId) {\n    console.log('renew');\n    getGroupWeatherData(cityId)\n      .then(data => {\n        console.log(data.list);\n        cities.forEach((city, index) => {\n          console.log(city.id, data.list[0].id);\n          if (city.id === data.list[0].id) {\n            const newCities = [...cities];\n            newCities.splice(index, 1, data.list[0])\n            console.log(newCities);\n            setCities(newCities)\n            writeToStorage(newCities);\n          }\n        })\n      })\n      .catch(err => console.log(err))\n  }\n\n  return (\n    <div className=\"main-container\">\n      <header className=\"header\">\n        <Link to=\"/\">\n          <div className=\"header__link\">\n            Home\n          </div>\n        </Link>\n        <div className=\"header__search-container\">\n          <input\n            type=\"text\"\n            id=\"search\"\n            className=\"header__search-input\"\n          />\n          <button\n            className=\"header__button\"\n            onClick={inputHandler}\n          >\n            Add\n          </button>\n          <button\n            className=\"header__button\"\n            onClick={() => {\n              localStorage.clear();\n              setCities([]);\n            }}\n          >Clear All</button>\n        </div>\n      </header>\n\n      <main className=\"main\">\n        <Switch>\n          <Route exact path=\"/\">\n            <CityCards\n              cities={cities}\n              setCurrentCity={setCurrentCity}\n              deleteCity={deleteCity}\n              renewData={renewData}\n            />\n          </Route>\n          \n          <Route path=\"/:cityName\">\n            <CityPage currentCityForecast={currentCityForecast} />\n          </Route>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}